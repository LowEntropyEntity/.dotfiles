---
- hosts: localhost

  vars_prompt:

    - name: user
      prompt: enter non-root user name (leave blank to skip)
      private: false
      default: ""

    - name: user_password
      prompt: enter user password (leave blank if skipped above)
      default: ""

    - name: user_password_confirm
      prompt: re-enter user password to confirm (leave blank if skipped above)
      default: ""

    - name: hostname
      prompt: enter hostname (leave blank to skip)
      private: false
      default: ""

  tasks:

    - name: root specific
      block:

        - name: fail if running as root but no user specified
          assert:
            that:
              - not (ansible_user_id == '0' and user|length == 0)
            fail_msg: "must specify a user when running as root"

        - name: validate password
          assert:
            that:
              - user|length == 0 or (user_password == user_password_confirm and user_password|length > 0)
            fail_msg: "password must match and not be empty if user is specified"

        # Attempt to detect NVIDIA GPU (optional). If detection fails or is not desired, you can prompt.
        - name: detect nvidia GPU
          shell: "lspci | grep -i nvidia"
          register: nvidia_check
          changed_when: false

        - set_fact:
            has_nvidia: "{{ nvidia_check.stdout != '' }}"

        - name: set hostname
          hostname:
            name: "{{ hostname }}"
          when: hostname|length > 0 and hostname != ansible_hostname

        - name: pacman update
          pacman:
            update_cache: true
            upgrade: true

        - name: install base apps
          pacman:
            name:
              #=== System / Shells / Core Tools ===
              - base-devel                 # Core Arch build environment (makepkg, gcc, etc.)
              - linux-lts-headers          # Kernel headers for LTS kernel
              - man-db                     # Man pages database
              - openssh                    # SSH client/server
              - less
              - tmux
              - unzip
              - usbutils
              - wget
              - xdg-user-dirs
              - zsh
              - zsh-completions

              #=== Audio / Media ===
              - alsa-utils                 # ALSA sound utilities (amixer, etc.)
              - pavucontrol                # GUI volume control for PipeWire/PulseAudio
              - pipewire                   # Next-gen audio/video server
              - wireplumber                # Session manager for PipeWire
              - phonon-qt5-vlc             # Qt multimedia backend using VLC

              #=== Bluetooth ===
              - blueman                    # Bluetooth manager GUI
              - bluez                      # Official Bluetooth protocol stack
              - bluez-utils                # Bluetooth command-line utilities

              #=== Networking / DNS / Security ===
              - bind                       # DNS tools (e.g. `dig`)
              - dnscrypt-proxy             # DNS encryption (DoH/DoT)
              - ccid                       # Smart card CCID driver
              - pcsclite                   # Daemon to communicate with smartcards
              - hopenpgp-tools             # Additional PGP utilities
              - yubikey-manager            # Manage YubiKeys
              - yubikey-personalization    # Configure YubiKey parameters
              - gnupg
              - gocryptfs                  # Encrypted FUSE filesystem
              - jq                         # JSON command-line processor
              - pass                       # GPG-based password manager
              - pass-otp                   # OTP extension for pass

              #=== Cloud / CLI Tools ===
              - aws-cli-v2                 # AWS command-line interface
              - ripgrep                    # Faster grep alternative
              - fzf                        # Fuzzy finder for the command line
              - rustup                     # Rust toolchain installer
              - gdb

              #=== File Management / GPU libs ===
              - dolphin                    # KDE file manager
              - libva                      # VA-API for video acceleration
              - brightnessctl              # Control screen brightness via CLI
              - libfido2                   # FIDO/U2F authentication library
              - zbar                       # Barcode/QR code scanner CLI tools

              #=== Containers ===
              - docker
              - docker-compose

              #=== Wayland / Display Utilities ===
              - mako                       # Wayland notification daemon
              - usbip                      # USB over IP utility
              - wl-clipboard               # Wayland clipboard utilities

              #=== Additional Common Tools ===
              - git
              - git-lfs

        - name: install development apps
          pacman:
            name:
              - clang
              - cmake
              - dart
              - go
              - gradle
              - mitmproxy
              - nodejs
              - npm

        - name: install visual apps
          pacman:
            name:
              #=== Terminal / Browsers / Editors ===
              - alacritty
              - chromium
              - neovim
              - blender

              #=== Linux command replacements ===
              - bat                        # cat
              - fd                         # find
              - eza                        # ls

              #=== Wayland Compositor & Related Tools ===
              - hyprland
              - hyprpicker                 # Color picker for Wayland
              - grim                       # Screenshot tool for Wayland
              - slurp                      # Select regions in Wayland (e.g. screenshot)
              - swayidle                   # Idle management for Wayland
              - waybar                     # Customizable Wayland status bar
              - waylock                    # Screen locker for Wayland
              - wf-recorder                # Screen recorder for Wayland
              - wofi                       # Wayland application launcher
              - xdg-desktop-portal-wlr     # Desktop portal for Wayland (screensharing, etc.)

              #=== Fonts / Theming / Qt Integration ===
              - font-manager
              - noto-fonts-emoji
              - ttf-hack-nerd
              - ttf-jetbrains-mono-nerd
              - qt5ct                      # Qt5 configuration tool
              - qt5-wayland                # Wayland support for Qt5 apps
              - qt6-wayland                # Wayland support for Qt6 apps

              #=== GPU / Multimedia Tools ===
              - obs-studio                 # Video recording/streaming
              - speedcrunch                # calculator
              - spotify-launcher
              - udiskie                    # Automount tool for removable media
              - vlc
              - polkit-kde-agent           # Polkit auth agent for KDE
              - v4l2loopback-dkms          # Virtual V4L2 camera device module

              #=== development tools ===
              - git-delta

        - name: install nvidia-related packages
          pacman:
            name:
              - cuda                       # NVIDIA GPU compute toolkit
              - nvidia-dkms                # NVIDIA proprietary driver (DKMS)
              - nvidia-utils
              - nvidia-container-toolkit
            state: present
          when: has_nvidia

        - name: install utilities
          pacman:
            name:
              - cups                       # Printing system

        - name: configure dnscrypt-proxy for DoH
          copy:
            content: |
              server_names = ['cloudflare', 'google']
            dest: /etc/dnscrypt-proxy/dnscrypt-proxy.toml
            owner: root
            group: root
            mode: '0644'

        - name: enable dnscrypt-proxy
          systemd_service:
            name: dnscrypt-proxy.service
            enabled: true
            state: started

        - name: update /etc/resolv.conf to use dnscrypt-proxy
          lineinfile:
            path: /etc/resolv.conf
            regexp: '^nameserver '
            line: 'nameserver 127.0.0.1'

        - name: disable NetworkManager DNS overwrites
          copy:
            dest: /etc/NetworkManager/conf.d/dns-override.conf
            owner: root
            group: root
            mode: '0644'
            content: |
              [main]
              dns=none

        - name: restart NetworkManager
          systemd:
            name: NetworkManager
            state: restarted

        - name: configure ssh
          get_url:
            url: https://raw.githubusercontent.com/LowEntropyEntity/.dotfiles/main/.setup/arch/20-force_publickey_auth.conf
            dest: /etc/ssh/sshd_config.d/20-force_publickey_auth.conf

        - name: enable sshd
          systemd_service:
            name: sshd
            enabled: true
            state: started

        - name: enable timesync
          systemd_service:
            name: systemd-timesyncd
            enabled: true
            state: started

        - name: enable docker
          systemd_service:
            name: docker
            enabled: true
            state: started

        - name: enable bluetooth
          systemd_service:
            name: bluetooth
            enabled: true
            state: started

        - name: enable nvidia-hibernate
          systemd_service:
            name: nvidia-hibernate
            enabled: true
          when: has_nvidia

        - name: enable nvidia-resume
          systemd_service:
            name: nvidia-resume
            enabled: true
          when: has_nvidia

        - name: enable nvidia-suspend
          systemd_service:
            name: nvidia-suspend
            enabled: true
          when: has_nvidia

        - name: enable printing
          systemd_service:
            name: cups
            enabled: true
            state: started

        - name: delete waybar config (will come from dotfiles later)
          file:
            path: /etc/xdg/waybar
            state: absent

        - name: create boot loader config
          get_url:
            url: https://raw.githubusercontent.com/LowEntropyEntity/.dotfiles/main/.setup/arch/systemd-boot/loader.conf
            dest: /boot/loader/loader.conf

        - name: get root partition device
          shell: df -h | grep '[[:space:]]/$' | cut -d ' ' -f1
          register: root_device
          changed_when: false

        - set_fact:
            root_device: '{{ root_device.stdout }}'

        - name: set part_uuid variable
          shell: "blkid | grep {{ root_device }} | grep -oP 'PARTUUID=\"\\K[^\"]+'"
          register: part_uuid
          changed_when: false

        - set_fact:
            part_uuid: '{{ part_uuid.stdout }}'

        - name: fetch boot loader entry template
          get_url:
            url: https://raw.githubusercontent.com/LowEntropyEntity/.dotfiles/main/.setup/arch/systemd-boot/arch.conf
            dest: ./arch.conf

        - name: fetch boot loader fallback entry template
          get_url:
            url: https://raw.githubusercontent.com/LowEntropyEntity/.dotfiles/main/.setup/arch/systemd-boot/arch-fallback.conf
            dest: ./arch-fallback.conf

        - name: create boot loader entry
          template:
            src: arch.conf
            dest: /boot/loader/entries/arch.conf

        - name: create boot loader fallback entry
          template:
            src: arch-fallback.conf
            dest: /boot/loader/entries/arch-fallback.conf

        - name: configure ramdisk
          get_url:
            url: "https://raw.githubusercontent.com/LowEntropyEntity/.dotfiles/main/.setup/arch/mkinitcpio{{ '-nvidia' if has_nvidia else '' }}.conf"
            dest: /etc/mkinitcpio.conf

        - name: create ramdisk
          command: mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-linux.img

        - name: configure modprobe
          copy:
            content: |
              options nvidia-drm modeset=1
              options nvidia NVreg_PreserveVideoMemoryAllocations=1
            dest: /etc/modprobe.d/nvidia.conf

        - name: configure nvidia udev rule
          copy:
            content: 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x030000", ATTR{power/control}="auto"'
            dest: /etc/udev/rules.d/99-nvidia.rules

        - name: configure nvidia for docker
          command: nvidia-ctk runtime configure --runtime=docker
          when: has_nvidia

        - name: restart docker
          systemd:
            name: docker
            state: restarted
          when: has_nvidia

        - name: ignore lid closing (handled by hyprland)
          lineinfile:
            path: /etc/systemd/logind.conf
            regexp: '^(.*)HandleLidSwitch='
            line: "HandleLidSwitch=ignore"

        - name: grant wheel group sudo
          copy:
            content: "%wheel ALL=(ALL) NOPASSWD: ALL\n"
            dest: "/etc/sudoers.d/wheel"

        - name: check if user exists
          command: id -u {{ user }}
          register: user_id
          failed_when: false
          changed_when: false
          when: user|length > 0

        - name: create user
          user:
            append: true
            groups:
              - docker
              - input
              - wheel
            name: "{{ user }}"
            password: "{{ user_password | password_hash('sha512') }}"
            shell: /usr/bin/zsh
          when: user|length > 0 and user_id.rc != 0

      when: ansible_user_id == '0'

    - name: set user to current user if no user given
      set_fact:
        user: "{{ ansible_env.USER }}"
      when: user|length == 0

    # https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
    - name: nvidia config
      block:

        - name: configure container runtime
          command: "nvidia-ctk runtime configure --runtime=docker --config=/home/{{ user }}/.config/docker/daemon.json"
          become: true
          become_user: "{{ user }}"
          when: has_nvidia

        - name: configure container runtime
          command: systemctl --user restart docker
          become: true
          become_user: "{{ user }}"
          when: has_nvidia

        - name: run nvidia-ctk
          command: nvidia-ctk config --set nvidia-container-cli.no-cgroups --in-place
          when: has_nvidia

    - name: user specific
      block:

        - name: create xdg dirs
          file:
            path: "{{ item }}"
            state: directory
          loop:
            -  "/home/{{ user }}/desktop"
            -  "/home/{{ user }}/downloads"
            -  "/home/{{ user }}/media/documents"
            -  "/home/{{ user }}/media/music"
            -  "/home/{{ user }}/media/pictures"
            -  "/home/{{ user }}/media/videos"
            -  "/home/{{ user }}/public"
            -  "/home/{{ user }}/screenshots"
            -  "/home/{{ user }}/templates"

        - name: create containers dirs
          file:
            path: "{{ item }}"
            state: directory
            owner: "{{ user }}"
            group: "{{ user }}"
          loop:
            - "/home/{{ user }}/.config/containers/ungoogled-chrome"
            - "/home/{{ user }}/.config/containers/firefox"

        - name: configure rust
          command: rustup default stable
          args:
            chdir: "/home/{{ user }}"
          environment:
            HOME: "/home/{{ user }}"

        - name: check if dotfiles are downloaded
          stat: "path=/home/{{ user }}/.dotfiles"
          register: dotfiles

        - name: clone dotfiles
          when: not dotfiles.stat.exists
          git:
            repo: https://github.com/LowEntropyEntity/.dotfiles.git
            dest: "/home/{{ user }}/.dotfiles/"
            bare: yes
          register: dotfiles_clone

        - name: set dotfiles push remote
          git_config:
            name: remote.origin.pushurl
            value: git@github.com:LowEntropyEntity/.dotfiles.git
            repo: "/home/{{ user }}/.dotfiles"
            scope: local
          when: dotfiles_clone is changed or dotfiles.stat.exists

        - name: configure dotfiles to not show untracked files
          git_config:
            name: status.showUntrackedFiles
            value: "no"
            repo: "/home/{{ user }}/.dotfiles"
            scope: local

        - name: checkout dotfiles
          shell: "git --git-dir=/home/{{ user }}/.dotfiles/ --work-tree=/home/{{ user }} checkout -f"
          args:
            chdir: "/home/{{ user }}/.dotfiles"
          register: debug
          when: dotfiles_clone is changed or not dotfiles.stat.exists

        - debug:
            msg: "{{ debug.stdout }}"
          when: dotfiles_clone is changed or not dotfiles.stat.exists

        - name: import gpg key
          command: gpg --locate-key sean@sean.xyz
          args:
            chdir: "/home/{{ user }}"
          register: gpg_key_check
          changed_when: false

        - name: trust gpg key
          shell: echo "1F86464D595F2DCD5F6029B6E81D523E5DD412E2:6:" | gpg --import-ownertrust
          when: "'1F86464D595F2DCD5F6029B6E81D523E5DD412E2' not in gpg_key_check.stdout"

        - name: sync submodules
          shell: "git --git-dir=/home/{{ user }}/.dotfiles/ --work-tree=/home/{{ user }} submodule update --init"
          args:
            chdir: "/home/{{ user }}/.dotfiles"
          register: debug

        - debug:
            msg: "{{ debug.stdout }}"

        - name: list aur packages
          find:
            paths: "/home/{{ user }}/.src/aur.archlinux.org"
            file_type: directory
          register: aur_directories

        - set_fact:
            aur_directories: "{{ aur_directories.files }}"

        - name: build aur packages
          command: makepkg -sirc --noconfirm
          args:
            chdir: "{{ item.path }}"
          with_items: "{{ aur_directories }}"
          when: aur_directories|length > 0

        - name: install aur packages with yay
          command: yay -S --noconfirm {{ item }}
          ignore_errors: true
          with_items:
            - java-service-wrapper
            - swaylock-effects
            - swww

            # ai
            - chatgpt-shell-cli
            - jan-bin
            - python-huggingface-hub
            - grimblast-git

            # privacy / security
            - i2p
            - keybase-bin
            - proton-vpn-gtk-app

            # collaboration
            - slack-desktop
            - zoom

            # development
            - android-studio
            - aws-cli-v2-bin
            # this is failing: flutter
            - postman-bin
            - visual-studio-code-bin
          register: yay_install_results

        - name: show yay installation failures
          debug:
            msg: "Failed to install {{ item.item }}: {{ item.stderr }}"
          with_items: "{{ yay_install_results.results }}"
          when: item.rc != 0

        - name: reset android studio sdk directory
          file:
            path: "/home/{{ user }}/android-sdk"
            state: absent

        - name: create android studio dirs
          file:
            path: "{{ item }}"
            state: directory
          loop:
            - "/home/{{ user }}/android-sdk/platforms"
            - "/home/{{ user }}/android-sdk/emulator"
            - "/home/{{ user }}/android-sdk/cmdline-tools/latest"
            - "/home/{{ user }}/android-sdk/build-tools/35.0.0"
            - "/home/{{ user }}/android-sdk/build-tools/36.0.0-4c1"
            - "/home/{{ user }}/android-sdk/sources/android-34"

        - name: install android cmdline-tools
          unarchive:
            src: "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
            dest: "/home/{{ user }}/android-sdk/cmdline-tools/latest"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/cmdline-tools/latest/bin"

        # Android sources
        - name: install android sources
          unarchive:
            src: "https://dl.google.com/android/repository/sources-34_r01.zip"
            dest: "/home/{{ user }}/android-sdk/sources/android-34"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/sources/android-34/AndroidManifest.xml"

        - name: install android build-tools
          unarchive:
            src: "https://dl.google.com/android/repository/build-tools_r36-rc1_linux.zip"
            dest: "/home/{{ user }}/android-sdk/build-tools/36.0.0-4c1"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/build-tools/36.0.0-4c1/bin"

        - name: install android platform-tools
          unarchive:
            src: "https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
            dest: "/home/{{ user }}/android-sdk"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/platform-tools/adb"

        - name: install android platform 34-ext7
          unarchive:
            src: "https://dl.google.com/android/repository/platform-34-ext7_r02.zip"
            dest: "/home/{{ user }}/android-sdk/platforms"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/platforms/android-34-ext7/package.xml"

        - name: install android emulator
          unarchive:
            src: "https://dl.google.com/android/repository/emulator-linux_x64-12414864.zip"
            dest: "/home/{{ user }}/android-sdk/emulator"
            remote_src: yes
            creates: "/home/{{ user }}/android-sdk/emulator/emulator"

        # - name: point flutter to android-sdk
        #   command: "flutter config --android-sdk /home/{{ user }}/android-sdk"
        #   args:
        #     chdir: "/home/{{ user }}"
        #   environment:
        #     HOME: "/home/{{ user }}"
        #   changed_when: false
        #
        # - name: accept android-studio sdk licenses
        #   shell: yes | flutter doctor --android-licenses
        #   args:
        #     chdir: "/home/{{ user }}"
        #   environment:
        #     HOME: "/home/{{ user }}"

      become: true
      become_user: "{{ user }}"

    - name: disable root
      user:
        name: root
        password: "!"
      when: ansible_user_id == '0'
